<?php

  /**
   * @file
   * Creates block and configuration to a Facebook API.
   * All rights reserved for Facebook (2014), for the content.
   */
  /**
   * Implements hook_help().
   *
   * You can add documentation and help here (in admin/help#facebook_inop). This
   * documentation can help the users use and extend you module.
   *
   */

  function facebook_inop_help($path, $arg) {
    switch ($path) {
      case 'admin/help#facebook_inop';
        return '<p>' . t('This module displays a block which shows a list of InnoEvent news') . '</p>';
      break;
      
    }
  }

  /**
   * Implements hook_block_info().
   */
  function facebook_inop_block_info() {
    $blocks['facebook_inop'] = array(
      // This is the name that will appear in the block titel
      'info' => t('InnoEvent'),
      // defalt settings deklaerd by drupal
      'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
  }

  /**
   * Implements hook_menu().
   *
   * Defines paths to provide page callbacks and menu items for the site.
   * Here it defines a configuration page with callback to a form, we'll
   * create later on.
   *
   */
  function facebook_inop_menu() {
    $items = array();
    // Module configuration page.
    $items['admin/config/content/facebook_inop'] = array(
      'title' => 'Facebook InnoEvent',
      'description' => 'Configuration for Facebook InnoEvent module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('facebook_inop_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    return $items;
  }

  /**
   * Custom API content callback.
  *
   * This callback is a custom callback to get ESPN news data.
   * Here we request the data, preprocesses it and creates a list of news. The 
   * array '$items' contains all the news, we'll display it as a unordered list
   * later on.
   *
   */
  function facebook_inop_api_content() {
      require_once 'libs/facebook.php';

      error_reporting(0);

      try {
        $facebook = new Facebook(array(
          'appId' => variable_get('facebook_inop_app_id'), 
          'secret' => variable_get('facebook_inop_app_secret')
        ));

        $result_page = $facebook->api('/'. variable_get('facebook_inop_page'), 'GET');
        $result_feed = $facebook->api('/'. variable_get('facebook_inop_page') . '/feed', 'GET');
        $result_picture = $facebook->api('/'. variable_get('facebook_inop_page') .'?fields=picture', 'GET');

        // Create li item with content.

       
        for($i = 0; $i < variable_get('facebook_inop_limit'); $i++) { 
          $date = strtotime($result_feed['data'][$i]['created_time']);
          $items[] = array(
            'data' => '
                    <div class="message">' .
                      $result_feed['data'][$i]['message'] . '<br>' . 
                      '<a href="' . $result_page['link'] . '"><img src="' . $result_feed['data'][$i]['picture'] . '"></a><br>' .
                      date('d. F k\l. H:i', $date) . 
                    '</div>'
            ,
          );
        }
      
      // If no content is found, return fail.
      if (empty($items)) {
        $items[] = array(
          'data' => 'No news available',
        );
      }
      return $items;
    } catch(Exception $e) {
        echo 'Caught exception: ' .  $e->getMessage();
    }
  }

  /**
   * Implements hook_block_view().
   */
  function facebook_inop_block_view($delta = '') {
    $block = array();
    switch ($delta) {
      case 'facebook_inop':
        // create a list whit attributes.
        $attributes = array(
          'id' => 'facebook_inop',
        );
        // Sets the block title as Facebook inop.
        $block['subject'] = t('Facebook inop');
        // Gets the content.
        $items = facebook_inop_api_content();
        // Print out the list.
        $block['content'] = theme('item_list', array(
          'items' =>  $items,
          'type' => 'ul',
          'attributes' => array(
            'id' => 'facebookinop',
          ),
        ));
        return $block;
    }
  } 

  /**
   * Implements hook_form().
   */

  function facebook_inop_form($form, &$form_state) {

    $form['facebook_api'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook InnoEvent'),
      '#description' => t('For at kunne sætte dette modul op skal du være rigistret som en facebook develepor. 
        Har du ikke en konto kan du registre dig på http://developers.facebook.com'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['facebook_api']['facebook_inop_app_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Facebook App ID'),
      '#default_value' => variable_get('facebook_inop_app_id'),
      '#size' => 40,
      '#maxlength' => 24,
      '#description' => t('API fra din facbook developer konto'),
      '#required' => TRUE,
    );
    $form['facebook_api']['facebook_inop_app_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Facebook App Secret'),
      '#default_value' => variable_get('facebook_inop_app_secret'),
      '#size' => 40,
      '#maxlength' => 40,
      '#description' => t('API fra din facebook developer konto'),
      '#required' => TRUE,
    );
    $form['facebook_api']['facebook_inop_page'] = array(
      '#type' => 'textfield',
      '#title' => t('Facebook side'),
      '#default_value' => variable_get('facebook_inop_page'),
      '#size' => 40,
      '#maxlength' => 24,
      '#description' => t('Hvilken favebook siden du ønsker du at vise'),
      '#required' => TRUE,
    );
    $form['facebook_api']['facebook_inop_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Antal post visninger'),
      '#default_value' => variable_get('facebook_inop_limit', 10),
      '#size' => 5,
      '#maxlength' => 2,
      '#description' => t('hvor mange post skal vises'),
      '#required' => TRUE,
    );
    return system_settings_form($form);
  }


  /**
   * Implements hook_validate().
   *
   * Validation for configuration form. Since we need a number in the
   * limit-textfield, we check that the inout is correct.
   *
   */
  function facebook_inop_form_validate($form, &$form_state) {
    // Get current value from input.
    $facebook_inop_limit = $form_state['values']['facebook_inop_limit'];
    // Check that input is a number.
    if (!is_numeric($facebook_inop_limit)) {
      form_set_error('facebook_inop_limit', t('Limit must be a number.'));
    }
    // Check that input is not negative.
    elseif ($facebook_inop_limit <= 0) {
      form_set_error('facebook_inop_limit', t('Limit must be between 1 and 99.'));
    }
  }
